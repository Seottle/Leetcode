1.
    malloc = memory allocation 
    malloc 和 free是一组C语言的标准库函数
2.
    new/delete是C++中的运算符，调用delete时，delete在释放内存之前调用类的析构函数，但是free并没有这个操作
3.
    1) 
        malloc与free是C++/C语言的标准库函数，new/delete是C++的运算符。它们都可用于申请动态内存和释放内存。
    2) 
        对于非内部数据类型的对象而言，光用maloc/free无法满足动态对象的要求。对象在创建的同时要自动执行构造函数，对象在消亡之前要自动执行析构函数。
        由于malloc/free是库函数而不是运算符，不在编译器控制权限之内，不能够把执行构造函数和析构函数的任务强加于malloc/free。
        因此C++语言需要一个能完成动态内存分配和初始化工作的运算符new，以及一个能完成清理与释放内存工作的运算符delete。注意new/delete不是库函数。
        我们不要企图用malloc/free来完成动态对象的内存管理，
        应该用new/delete。由于内部数据类型的“对象”没有构造与析构的过程，对它们而言malloc/free和new/delete是等价的。
    3)
        既然new/delete的功能完全覆盖了malloc/free，为什么C++不把malloc/free淘汰出局呢？
        这是因为C++程序经常要调用C函数，而C程序只能用malloc/free管理动态内存。
        如果用free释放“new创建的动态对象”，那么该对象因无法执行析构函数而可能导致程序出错。
        如果用delete释放“malloc申请的动态内存”，结果也会导致程序出错，但是该程序的可读性很差。
        所以new/delete必须配对使用，malloc/free也一样。
